{
	"state": {
		"passed": 9,
		"failed": 0,
		"skipped": 0
	},
	"start": "2017-09-06T03:35:32.952Z",
	"end": "2017-09-06T03:35:40.857Z",
	"capabilities": {
		"browserName": "chrome",
		"chromeOptions": {
			"args": [
				"disable-gpu",
				"headless"
			]
		},
		"proxy": null
	},
	"host": "127.0.0.1",
	"port": 4444,
	"baseUrl": "http://localhost",
	"framework": "mocha",
	"mochaOpts": {
		"timeout": 10000,
		"ui": "bdd"
	},
	"suites": [
		{
			"name": "wauker",
			"duration": 0,
			"start": "2017-09-06T03:35:40.187Z",
			"tests": [],
			"hooks": []
		},
		{
			"name": "wauker",
			"duration": 490,
			"start": "2017-09-06T03:35:40.187Z",
			"end": "2017-09-06T03:35:40.677Z",
			"tests": [],
			"hooks": [
				{
					"start": "2017-09-06T03:35:40.189Z",
					"end": "2017-09-06T03:35:40.189Z",
					"duration": 0,
					"title": "\"before each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ 'Array' ]"
				},
				{
					"start": "2017-09-06T03:35:40.283Z",
					"end": "2017-09-06T03:35:40.284Z",
					"duration": 1,
					"title": "\"after each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ 'Array' ]"
				},
				{
					"start": "2017-09-06T03:35:40.285Z",
					"end": "2017-09-06T03:35:40.285Z",
					"duration": 0,
					"title": "\"before each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ 'RangeError', 'Error' ]"
				},
				{
					"start": "2017-09-06T03:35:40.338Z",
					"end": "2017-09-06T03:35:40.338Z",
					"duration": 0,
					"title": "\"after each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ 'RangeError', 'Error' ]"
				},
				{
					"start": "2017-09-06T03:35:40.338Z",
					"end": "2017-09-06T03:35:40.339Z",
					"duration": 1,
					"title": "\"before each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ ]"
				},
				{
					"start": "2017-09-06T03:35:40.398Z",
					"end": "2017-09-06T03:35:40.398Z",
					"duration": 0,
					"title": "\"after each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ ]"
				},
				{
					"start": "2017-09-06T03:35:40.401Z",
					"end": "2017-09-06T03:35:40.402Z",
					"duration": 1,
					"title": "\"before each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ ]"
				},
				{
					"start": "2017-09-06T03:35:40.447Z",
					"end": "2017-09-06T03:35:40.448Z",
					"duration": 1,
					"title": "\"after each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ ]"
				},
				{
					"start": "2017-09-06T03:35:40.449Z",
					"end": "2017-09-06T03:35:40.449Z",
					"duration": 0,
					"title": "\"before each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ ]"
				},
				{
					"start": "2017-09-06T03:35:40.489Z",
					"end": "2017-09-06T03:35:40.489Z",
					"duration": 0,
					"title": "\"after each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ ]"
				},
				{
					"start": "2017-09-06T03:35:40.489Z",
					"end": "2017-09-06T03:35:40.489Z",
					"duration": 0,
					"title": "\"before each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ ]"
				},
				{
					"start": "2017-09-06T03:35:40.537Z",
					"end": "2017-09-06T03:35:40.537Z",
					"duration": 0,
					"title": "\"after each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ ]"
				},
				{
					"start": "2017-09-06T03:35:40.538Z",
					"end": "2017-09-06T03:35:40.539Z",
					"duration": 1,
					"title": "\"before each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ ]"
				},
				{
					"start": "2017-09-06T03:35:40.583Z",
					"end": "2017-09-06T03:35:40.583Z",
					"duration": 0,
					"title": "\"after each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ ]"
				},
				{
					"start": "2017-09-06T03:35:40.584Z",
					"end": "2017-09-06T03:35:40.585Z",
					"duration": 1,
					"title": "\"before each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ ]"
				},
				{
					"start": "2017-09-06T03:35:40.626Z",
					"end": "2017-09-06T03:35:40.626Z",
					"duration": 0,
					"title": "\"after each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ ]"
				},
				{
					"start": "2017-09-06T03:35:40.628Z",
					"end": "2017-09-06T03:35:40.629Z",
					"duration": 1,
					"title": "\"before each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ 'Pear', 'Apple', 'Orange' ]"
				},
				{
					"start": "2017-09-06T03:35:40.676Z",
					"end": "2017-09-06T03:35:40.676Z",
					"duration": 0,
					"title": "\"after each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ 'Pear', 'Apple', 'Orange' ]"
				},
				{
					"start": "2017-09-06T03:35:40.677Z",
					"end": "2017-09-06T03:35:40.677Z",
					"duration": 0,
					"title": "\"after all\" hook",
					"associatedSuite": "wauker"
				}
			]
		},
		{
			"name": "`wauker( Array ).map( ( constructor ) => constructor.name )`",
			"duration": 96,
			"start": "2017-09-06T03:35:40.188Z",
			"end": "2017-09-06T03:35:40.284Z",
			"tests": [
				{
					"name": "should be equal to [ 'Array' ]",
					"start": "2017-09-06T03:35:40.189Z",
					"end": "2017-09-06T03:35:40.283Z",
					"duration": 94,
					"state": "pass"
				}
			],
			"hooks": []
		},
		{
			"name": "`wauker( RangeError ).map( ( constructor ) => constructor.name )`",
			"duration": 54,
			"start": "2017-09-06T03:35:40.284Z",
			"end": "2017-09-06T03:35:40.338Z",
			"tests": [
				{
					"name": "should be equal to [ 'RangeError', 'Error' ]",
					"start": "2017-09-06T03:35:40.284Z",
					"end": "2017-09-06T03:35:40.337Z",
					"duration": 53,
					"state": "pass"
				}
			],
			"hooks": []
		},
		{
			"name": "`wauker( )`",
			"duration": 61,
			"start": "2017-09-06T03:35:40.338Z",
			"end": "2017-09-06T03:35:40.399Z",
			"tests": [
				{
					"name": "should be equal to [ ]",
					"start": "2017-09-06T03:35:40.338Z",
					"end": "2017-09-06T03:35:40.398Z",
					"duration": 60,
					"state": "pass"
				}
			],
			"hooks": []
		},
		{
			"name": "`wauker( 'hello' )`",
			"duration": 49,
			"start": "2017-09-06T03:35:40.399Z",
			"end": "2017-09-06T03:35:40.448Z",
			"tests": [
				{
					"name": "should be equal to [ ]",
					"start": "2017-09-06T03:35:40.399Z",
					"end": "2017-09-06T03:35:40.447Z",
					"duration": 48,
					"state": "pass"
				}
			],
			"hooks": []
		},
		{
			"name": "`wauker( 123 )`",
			"duration": 40,
			"start": "2017-09-06T03:35:40.449Z",
			"end": "2017-09-06T03:35:40.489Z",
			"tests": [
				{
					"name": "should be equal to [ ]",
					"start": "2017-09-06T03:35:40.449Z",
					"end": "2017-09-06T03:35:40.489Z",
					"duration": 40,
					"state": "pass"
				}
			],
			"hooks": []
		},
		{
			"name": "`wauker( { } )`",
			"duration": 48,
			"start": "2017-09-06T03:35:40.489Z",
			"end": "2017-09-06T03:35:40.537Z",
			"tests": [
				{
					"name": "should be equal to [ ]",
					"start": "2017-09-06T03:35:40.489Z",
					"end": "2017-09-06T03:35:40.537Z",
					"duration": 48,
					"state": "pass"
				}
			],
			"hooks": []
		},
		{
			"name": "`wauker( function( ){ } )`",
			"duration": 45,
			"start": "2017-09-06T03:35:40.538Z",
			"end": "2017-09-06T03:35:40.583Z",
			"tests": [
				{
					"name": "should be equal to [ ]",
					"start": "2017-09-06T03:35:40.538Z",
					"end": "2017-09-06T03:35:40.583Z",
					"duration": 45,
					"state": "pass"
				}
			],
			"hooks": []
		},
		{
			"name": "`wauker( ( ) => { } )`",
			"duration": 42,
			"start": "2017-09-06T03:35:40.584Z",
			"end": "2017-09-06T03:35:40.626Z",
			"tests": [
				{
					"name": "should be equal to [ ]",
					"start": "2017-09-06T03:35:40.584Z",
					"end": "2017-09-06T03:35:40.626Z",
					"duration": 42,
					"state": "pass"
				}
			],
			"hooks": []
		},
		{
			"name": "`wauker( new Pear( ) ).map( ( constructor ) => constructor.name )`",
			"duration": 49,
			"start": "2017-09-06T03:35:40.627Z",
			"end": "2017-09-06T03:35:40.676Z",
			"tests": [
				{
					"name": "should be equal to [ 'Pear', 'Apple', 'Orange' ]",
					"start": "2017-09-06T03:35:40.627Z",
					"end": "2017-09-06T03:35:40.676Z",
					"duration": 49,
					"state": "pass"
				}
			],
			"hooks": []
		}
	]
}