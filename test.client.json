{
	"state": {
		"passed": 9,
		"failed": 0,
		"skipped": 0
	},
	"start": "2017-09-07T05:34:14.078Z",
	"end": "2017-09-07T05:34:51.580Z",
	"capabilities": {
		"browserName": "chrome",
		"chromeOptions": {
			"args": [
				"disable-gpu",
				"headless"
			]
		},
		"proxy": null
	},
	"host": "127.0.0.1",
	"port": 4444,
	"baseUrl": "http://localhost",
	"framework": "mocha",
	"mochaOpts": {
		"timeout": 10000,
		"ui": "bdd"
	},
	"suites": [
		{
			"name": "wauker",
			"duration": 0,
			"start": "2017-09-07T05:34:50.859Z",
			"tests": [],
			"hooks": []
		},
		{
			"name": "wauker",
			"duration": 538,
			"start": "2017-09-07T05:34:50.860Z",
			"end": "2017-09-07T05:34:51.398Z",
			"tests": [],
			"hooks": [
				{
					"start": "2017-09-07T05:34:50.861Z",
					"end": "2017-09-07T05:34:50.862Z",
					"duration": 1,
					"title": "\"before each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ 'Array' ]"
				},
				{
					"start": "2017-09-07T05:34:50.964Z",
					"end": "2017-09-07T05:34:50.965Z",
					"duration": 1,
					"title": "\"after each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ 'Array' ]"
				},
				{
					"start": "2017-09-07T05:34:50.966Z",
					"end": "2017-09-07T05:34:50.967Z",
					"duration": 1,
					"title": "\"before each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ 'RangeError', 'Error' ]"
				},
				{
					"start": "2017-09-07T05:34:51.016Z",
					"end": "2017-09-07T05:34:51.016Z",
					"duration": 0,
					"title": "\"after each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ 'RangeError', 'Error' ]"
				},
				{
					"start": "2017-09-07T05:34:51.016Z",
					"end": "2017-09-07T05:34:51.016Z",
					"duration": 0,
					"title": "\"before each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ ]"
				},
				{
					"start": "2017-09-07T05:34:51.063Z",
					"end": "2017-09-07T05:34:51.064Z",
					"duration": 1,
					"title": "\"after each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ ]"
				},
				{
					"start": "2017-09-07T05:34:51.064Z",
					"end": "2017-09-07T05:34:51.065Z",
					"duration": 1,
					"title": "\"before each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ ]"
				},
				{
					"start": "2017-09-07T05:34:51.110Z",
					"end": "2017-09-07T05:34:51.110Z",
					"duration": 0,
					"title": "\"after each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ ]"
				},
				{
					"start": "2017-09-07T05:34:51.110Z",
					"end": "2017-09-07T05:34:51.110Z",
					"duration": 0,
					"title": "\"before each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ ]"
				},
				{
					"start": "2017-09-07T05:34:51.153Z",
					"end": "2017-09-07T05:34:51.153Z",
					"duration": 0,
					"title": "\"after each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ ]"
				},
				{
					"start": "2017-09-07T05:34:51.154Z",
					"end": "2017-09-07T05:34:51.154Z",
					"duration": 0,
					"title": "\"before each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ ]"
				},
				{
					"start": "2017-09-07T05:34:51.240Z",
					"end": "2017-09-07T05:34:51.240Z",
					"duration": 0,
					"title": "\"after each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ ]"
				},
				{
					"start": "2017-09-07T05:34:51.241Z",
					"end": "2017-09-07T05:34:51.242Z",
					"duration": 1,
					"title": "\"before each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ ]"
				},
				{
					"start": "2017-09-07T05:34:51.294Z",
					"end": "2017-09-07T05:34:51.294Z",
					"duration": 0,
					"title": "\"after each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ ]"
				},
				{
					"start": "2017-09-07T05:34:51.295Z",
					"end": "2017-09-07T05:34:51.296Z",
					"duration": 1,
					"title": "\"before each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ ]"
				},
				{
					"start": "2017-09-07T05:34:51.352Z",
					"end": "2017-09-07T05:34:51.352Z",
					"duration": 0,
					"title": "\"after each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ ]"
				},
				{
					"start": "2017-09-07T05:34:51.354Z",
					"end": "2017-09-07T05:34:51.354Z",
					"duration": 0,
					"title": "\"before each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ 'Pear', 'Apple', 'Orange' ]"
				},
				{
					"start": "2017-09-07T05:34:51.398Z",
					"end": "2017-09-07T05:34:51.398Z",
					"duration": 0,
					"title": "\"after each\" hook",
					"associatedSuite": "wauker",
					"associatedTest": "should be equal to [ 'Pear', 'Apple', 'Orange' ]"
				},
				{
					"start": "2017-09-07T05:34:51.398Z",
					"end": "2017-09-07T05:34:51.399Z",
					"duration": 1,
					"title": "\"after all\" hook",
					"associatedSuite": "wauker"
				}
			]
		},
		{
			"name": "`wauker( Array ).map( ( constructor ) => constructor.name )`",
			"duration": 106,
			"start": "2017-09-07T05:34:50.860Z",
			"end": "2017-09-07T05:34:50.966Z",
			"tests": [
				{
					"name": "should be equal to [ 'Array' ]",
					"start": "2017-09-07T05:34:50.861Z",
					"end": "2017-09-07T05:34:50.964Z",
					"duration": 103,
					"state": "pass"
				}
			],
			"hooks": []
		},
		{
			"name": "`wauker( RangeError ).map( ( constructor ) => constructor.name )`",
			"duration": 50,
			"start": "2017-09-07T05:34:50.966Z",
			"end": "2017-09-07T05:34:51.016Z",
			"tests": [
				{
					"name": "should be equal to [ 'RangeError', 'Error' ]",
					"start": "2017-09-07T05:34:50.966Z",
					"end": "2017-09-07T05:34:51.016Z",
					"duration": 50,
					"state": "pass"
				}
			],
			"hooks": []
		},
		{
			"name": "`wauker( )`",
			"duration": 48,
			"start": "2017-09-07T05:34:51.016Z",
			"end": "2017-09-07T05:34:51.064Z",
			"tests": [
				{
					"name": "should be equal to [ ]",
					"start": "2017-09-07T05:34:51.016Z",
					"end": "2017-09-07T05:34:51.063Z",
					"duration": 47,
					"state": "pass"
				}
			],
			"hooks": []
		},
		{
			"name": "`wauker( 'hello' )`",
			"duration": 46,
			"start": "2017-09-07T05:34:51.064Z",
			"end": "2017-09-07T05:34:51.110Z",
			"tests": [
				{
					"name": "should be equal to [ ]",
					"start": "2017-09-07T05:34:51.064Z",
					"end": "2017-09-07T05:34:51.110Z",
					"duration": 46,
					"state": "pass"
				}
			],
			"hooks": []
		},
		{
			"name": "`wauker( 123 )`",
			"duration": 43,
			"start": "2017-09-07T05:34:51.110Z",
			"end": "2017-09-07T05:34:51.153Z",
			"tests": [
				{
					"name": "should be equal to [ ]",
					"start": "2017-09-07T05:34:51.110Z",
					"end": "2017-09-07T05:34:51.153Z",
					"duration": 43,
					"state": "pass"
				}
			],
			"hooks": []
		},
		{
			"name": "`wauker( { } )`",
			"duration": 87,
			"start": "2017-09-07T05:34:51.153Z",
			"end": "2017-09-07T05:34:51.240Z",
			"tests": [
				{
					"name": "should be equal to [ ]",
					"start": "2017-09-07T05:34:51.153Z",
					"end": "2017-09-07T05:34:51.236Z",
					"duration": 83,
					"state": "pass"
				}
			],
			"hooks": []
		},
		{
			"name": "`wauker( function( ){ } )`",
			"duration": 53,
			"start": "2017-09-07T05:34:51.241Z",
			"end": "2017-09-07T05:34:51.294Z",
			"tests": [
				{
					"name": "should be equal to [ ]",
					"start": "2017-09-07T05:34:51.241Z",
					"end": "2017-09-07T05:34:51.294Z",
					"duration": 53,
					"state": "pass"
				}
			],
			"hooks": []
		},
		{
			"name": "`wauker( ( ) => { } )`",
			"duration": 58,
			"start": "2017-09-07T05:34:51.294Z",
			"end": "2017-09-07T05:34:51.352Z",
			"tests": [
				{
					"name": "should be equal to [ ]",
					"start": "2017-09-07T05:34:51.294Z",
					"end": "2017-09-07T05:34:51.352Z",
					"duration": 58,
					"state": "pass"
				}
			],
			"hooks": []
		},
		{
			"name": "`wauker( new Pear( ) ).map( ( constructor ) => constructor.name )`",
			"duration": 46,
			"start": "2017-09-07T05:34:51.352Z",
			"end": "2017-09-07T05:34:51.398Z",
			"tests": [
				{
					"name": "should be equal to [ 'Pear', 'Apple', 'Orange' ]",
					"start": "2017-09-07T05:34:51.353Z",
					"end": "2017-09-07T05:34:51.398Z",
					"duration": 45,
					"state": "pass"
				}
			],
			"hooks": []
		}
	]
}